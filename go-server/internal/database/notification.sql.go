// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notification.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_email, event_time, notify_time, message, notification_type, notification_ref_ID)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_email, notification_type, notification_ref_id, event_time, notify_time, message
`

type CreateNotificationParams struct {
	UserEmail         string
	EventTime         time.Time
	NotifyTime        time.Time
	Message           string
	NotificationType  NullNotificationsTypeEnum
	NotificationRefID uuid.NullUUID
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserEmail,
		arg.EventTime,
		arg.NotifyTime,
		arg.Message,
		arg.NotificationType,
		arg.NotificationRefID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.NotificationType,
		&i.NotificationRefID,
		&i.EventTime,
		&i.NotifyTime,
		&i.Message,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :one
DELETE FROM notifications
WHERE id = $1
RETURNING id, user_email, notification_type, notification_ref_id, event_time, notify_time, message
`

func (q *Queries) DeleteNotification(ctx context.Context, id uuid.UUID) (Notification, error) {
	row := q.db.QueryRowContext(ctx, deleteNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.NotificationType,
		&i.NotificationRefID,
		&i.EventTime,
		&i.NotifyTime,
		&i.Message,
	)
	return i, err
}

const deleteNotificationByRefID = `-- name: DeleteNotificationByRefID :many
DELETE FROM notifications
WHERE notification_ref_ID = $1
RETURNING id, user_email, notification_type, notification_ref_id, event_time, notify_time, message
`

func (q *Queries) DeleteNotificationByRefID(ctx context.Context, notificationRefID uuid.NullUUID) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, deleteNotificationByRefID, notificationRefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserEmail,
			&i.NotificationType,
			&i.NotificationRefID,
			&i.EventTime,
			&i.NotifyTime,
			&i.Message,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsToSendNow = `-- name: GetNotificationsToSendNow :many
SELECT id, user_email, notification_type, notification_ref_id, event_time, notify_time, message FROM notifications
WHERE notify_time <= $1
`

func (q *Queries) GetNotificationsToSendNow(ctx context.Context, notifyTime time.Time) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsToSendNow, notifyTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserEmail,
			&i.NotificationType,
			&i.NotificationRefID,
			&i.EventTime,
			&i.NotifyTime,
			&i.Message,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
