// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: interview.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createInterview = `-- name: CreateInterview :one
INSERT INTO interview (user_id, faculty_id, date, time, is_completed, remarks)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, faculty_id, date, time, is_completed, remarks, created_at, updated_at
`

type CreateInterviewParams struct {
	UserID      uuid.UUID
	FacultyID   uuid.UUID
	Date        sql.NullTime
	Time        sql.NullTime
	IsCompleted sql.NullBool
	Remarks     sql.NullString
}

func (q *Queries) CreateInterview(ctx context.Context, arg CreateInterviewParams) (Interview, error) {
	row := q.db.QueryRowContext(ctx, createInterview,
		arg.UserID,
		arg.FacultyID,
		arg.Date,
		arg.Time,
		arg.IsCompleted,
		arg.Remarks,
	)
	var i Interview
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.Date,
		&i.Time,
		&i.IsCompleted,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInterviewByID = `-- name: DeleteInterviewByID :one
DELETE FROM interview
WHERE id = $1
RETURNING id, user_id, faculty_id, date, time, is_completed, remarks, created_at, updated_at
`

func (q *Queries) DeleteInterviewByID(ctx context.Context, id uuid.UUID) (Interview, error) {
	row := q.db.QueryRowContext(ctx, deleteInterviewByID, id)
	var i Interview
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.Date,
		&i.Time,
		&i.IsCompleted,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInterviewByID = `-- name: GetInterviewByID :one
SELECT id, user_id, faculty_id, date, time, is_completed, remarks, created_at, updated_at FROM interview
WHERE id = $1
`

func (q *Queries) GetInterviewByID(ctx context.Context, id uuid.UUID) (Interview, error) {
	row := q.db.QueryRowContext(ctx, getInterviewByID, id)
	var i Interview
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.Date,
		&i.Time,
		&i.IsCompleted,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInterviewsOfUser = `-- name: GetInterviewsOfUser :many
SELECT id, user_id, faculty_id, date, time, is_completed, remarks, created_at, updated_at FROM interview
WHERE user_id = $1
`

func (q *Queries) GetInterviewsOfUser(ctx context.Context, userID uuid.UUID) ([]Interview, error) {
	rows, err := q.db.QueryContext(ctx, getInterviewsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Interview
	for rows.Next() {
		var i Interview
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FacultyID,
			&i.Date,
			&i.Time,
			&i.IsCompleted,
			&i.Remarks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInterviewsOfUserByFaculty = `-- name: GetInterviewsOfUserByFaculty :many
SELECT id, user_id, faculty_id, date, time, is_completed, remarks, created_at, updated_at FROM interview
WHERE user_id = $1 and faculty_id = $2
`

type GetInterviewsOfUserByFacultyParams struct {
	UserID    uuid.UUID
	FacultyID uuid.UUID
}

func (q *Queries) GetInterviewsOfUserByFaculty(ctx context.Context, arg GetInterviewsOfUserByFacultyParams) ([]Interview, error) {
	rows, err := q.db.QueryContext(ctx, getInterviewsOfUserByFaculty, arg.UserID, arg.FacultyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Interview
	for rows.Next() {
		var i Interview
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FacultyID,
			&i.Date,
			&i.Time,
			&i.IsCompleted,
			&i.Remarks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInterviewByID = `-- name: UpdateInterviewByID :one
UPDATE interview
SET 
    faculty_id = $2,
    date = $3,
    time = $4,
    is_completed = $5,
    remarks = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, faculty_id, date, time, is_completed, remarks, created_at, updated_at
`

type UpdateInterviewByIDParams struct {
	ID          uuid.UUID
	FacultyID   uuid.UUID
	Date        sql.NullTime
	Time        sql.NullTime
	IsCompleted sql.NullBool
	Remarks     sql.NullString
}

func (q *Queries) UpdateInterviewByID(ctx context.Context, arg UpdateInterviewByIDParams) (Interview, error) {
	row := q.db.QueryRowContext(ctx, updateInterviewByID,
		arg.ID,
		arg.FacultyID,
		arg.Date,
		arg.Time,
		arg.IsCompleted,
		arg.Remarks,
	)
	var i Interview
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.Date,
		&i.Time,
		&i.IsCompleted,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
