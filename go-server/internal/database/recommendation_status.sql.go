// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recommendation_status.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRecommendationStatus = `-- name: CreateRecommendationStatus :one

INSERT INTO recommender_status (application_id,recommender_id,user_id) 
VALUES ($1,$2,$3) 
RETURNING id, application_id, recommender_id, is_lor_submitted, user_id
`

type CreateRecommendationStatusParams struct {
	ApplicationID uuid.UUID
	RecommenderID uuid.UUID
	UserID        uuid.UUID
}

func (q *Queries) CreateRecommendationStatus(ctx context.Context, arg CreateRecommendationStatusParams) (RecommenderStatus, error) {
	row := q.db.QueryRowContext(ctx, createRecommendationStatus, arg.ApplicationID, arg.RecommenderID, arg.UserID)
	var i RecommenderStatus
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.RecommenderID,
		&i.IsLorSubmitted,
		&i.UserID,
	)
	return i, err
}

const getRecommendationStatusByUniversityApplicationId = `-- name: GetRecommendationStatusByUniversityApplicationId :many
SELECT rs.id, application_id, recommender_id, is_lor_submitted, rs.user_id, r.id, r.user_id, name, email, designation, institution, relationship, created_at, updated_at FROM recommender_status rs
LEFT JOIN recommender r ON r.id = rs.recommender_id
WHERE rs.application_id = $1
`

type GetRecommendationStatusByUniversityApplicationIdRow struct {
	ID             uuid.UUID
	ApplicationID  uuid.UUID
	RecommenderID  uuid.UUID
	IsLorSubmitted bool
	UserID         uuid.UUID
	ID_2           uuid.NullUUID
	UserID_2       uuid.NullUUID
	Name           sql.NullString
	Email          sql.NullString
	Designation    sql.NullString
	Institution    sql.NullString
	Relationship   sql.NullString
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetRecommendationStatusByUniversityApplicationId(ctx context.Context, applicationID uuid.UUID) ([]GetRecommendationStatusByUniversityApplicationIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecommendationStatusByUniversityApplicationId, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecommendationStatusByUniversityApplicationIdRow
	for rows.Next() {
		var i GetRecommendationStatusByUniversityApplicationIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.RecommenderID,
			&i.IsLorSubmitted,
			&i.UserID,
			&i.ID_2,
			&i.UserID_2,
			&i.Name,
			&i.Email,
			&i.Designation,
			&i.Institution,
			&i.Relationship,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUniversityNameByApplicationId = `-- name: GetUniversityNameByApplicationId :one
SELECT u.name FROM university u
JOIN university_application a ON u.id = a.university_id
WHERE a.id = $1
`

func (q *Queries) GetUniversityNameByApplicationId(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUniversityNameByApplicationId, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateRecommendationStatus = `-- name: UpdateRecommendationStatus :one
UPDATE recommender_status
SET is_lor_submitted = $2
WHERE id = $1
RETURNING id, application_id, recommender_id, is_lor_submitted, user_id
`

type UpdateRecommendationStatusParams struct {
	ID             uuid.UUID
	IsLorSubmitted bool
}

func (q *Queries) UpdateRecommendationStatus(ctx context.Context, arg UpdateRecommendationStatusParams) (RecommenderStatus, error) {
	row := q.db.QueryRowContext(ctx, updateRecommendationStatus, arg.ID, arg.IsLorSubmitted)
	var i RecommenderStatus
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.RecommenderID,
		&i.IsLorSubmitted,
		&i.UserID,
	)
	return i, err
}
