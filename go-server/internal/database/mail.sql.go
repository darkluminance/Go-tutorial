// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mail.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMail = `-- name: CreateMail :one
INSERT INTO mail (user_id, faculty_id, is_mailed, is_mail_replied, reply_vibe, is_interview_requested)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, faculty_id, is_mailed, is_mail_replied, reply_vibe, is_interview_requested, created_at, updated_at
`

type CreateMailParams struct {
	UserID               uuid.UUID
	FacultyID            uuid.UUID
	IsMailed             sql.NullBool
	IsMailReplied        sql.NullBool
	ReplyVibe            NullReplyVibeEnum
	IsInterviewRequested sql.NullBool
}

func (q *Queries) CreateMail(ctx context.Context, arg CreateMailParams) (Mail, error) {
	row := q.db.QueryRowContext(ctx, createMail,
		arg.UserID,
		arg.FacultyID,
		arg.IsMailed,
		arg.IsMailReplied,
		arg.ReplyVibe,
		arg.IsInterviewRequested,
	)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.IsMailed,
		&i.IsMailReplied,
		&i.ReplyVibe,
		&i.IsInterviewRequested,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMailByID = `-- name: DeleteMailByID :one
DELETE FROM mail
WHERE id = $1
RETURNING id, user_id, faculty_id, is_mailed, is_mail_replied, reply_vibe, is_interview_requested, created_at, updated_at
`

func (q *Queries) DeleteMailByID(ctx context.Context, id uuid.UUID) (Mail, error) {
	row := q.db.QueryRowContext(ctx, deleteMailByID, id)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.IsMailed,
		&i.IsMailReplied,
		&i.ReplyVibe,
		&i.IsInterviewRequested,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMailByID = `-- name: GetMailByID :one
SELECT m.id, m.user_id, m.faculty_id, m.is_mailed, m.is_mail_replied, m.reply_vibe, m.is_interview_requested, m.created_at, m.updated_at, f.name as faculty_name
FROM mail m
JOIN faculty f ON m.faculty_id = f.id
WHERE m.id = $1
`

type GetMailByIDRow struct {
	ID                   uuid.UUID
	UserID               uuid.UUID
	FacultyID            uuid.UUID
	IsMailed             sql.NullBool
	IsMailReplied        sql.NullBool
	ReplyVibe            NullReplyVibeEnum
	IsInterviewRequested sql.NullBool
	CreatedAt            sql.NullTime
	UpdatedAt            sql.NullTime
	FacultyName          string
}

func (q *Queries) GetMailByID(ctx context.Context, id uuid.UUID) (GetMailByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getMailByID, id)
	var i GetMailByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.IsMailed,
		&i.IsMailReplied,
		&i.ReplyVibe,
		&i.IsInterviewRequested,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacultyName,
	)
	return i, err
}

const getMailsOfUser = `-- name: GetMailsOfUser :many
SELECT m.id, m.user_id, m.faculty_id, m.is_mailed, m.is_mail_replied, m.reply_vibe, m.is_interview_requested, m.created_at, m.updated_at, f.name as faculty_name
FROM mail m
JOIN faculty f ON m.faculty_id = f.id
WHERE m.user_id = $1
`

type GetMailsOfUserRow struct {
	ID                   uuid.UUID
	UserID               uuid.UUID
	FacultyID            uuid.UUID
	IsMailed             sql.NullBool
	IsMailReplied        sql.NullBool
	ReplyVibe            NullReplyVibeEnum
	IsInterviewRequested sql.NullBool
	CreatedAt            sql.NullTime
	UpdatedAt            sql.NullTime
	FacultyName          string
}

func (q *Queries) GetMailsOfUser(ctx context.Context, userID uuid.UUID) ([]GetMailsOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getMailsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMailsOfUserRow
	for rows.Next() {
		var i GetMailsOfUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FacultyID,
			&i.IsMailed,
			&i.IsMailReplied,
			&i.ReplyVibe,
			&i.IsInterviewRequested,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacultyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMailsOfUserByFaculty = `-- name: GetMailsOfUserByFaculty :many
SELECT m.id, m.user_id, m.faculty_id, m.is_mailed, m.is_mail_replied, m.reply_vibe, m.is_interview_requested, m.created_at, m.updated_at, f.name as faculty_name
FROM mail m
JOIN faculty f ON m.faculty_id = f.id
WHERE m.user_id = $1 AND m.faculty_id = $2
`

type GetMailsOfUserByFacultyParams struct {
	UserID    uuid.UUID
	FacultyID uuid.UUID
}

type GetMailsOfUserByFacultyRow struct {
	ID                   uuid.UUID
	UserID               uuid.UUID
	FacultyID            uuid.UUID
	IsMailed             sql.NullBool
	IsMailReplied        sql.NullBool
	ReplyVibe            NullReplyVibeEnum
	IsInterviewRequested sql.NullBool
	CreatedAt            sql.NullTime
	UpdatedAt            sql.NullTime
	FacultyName          string
}

func (q *Queries) GetMailsOfUserByFaculty(ctx context.Context, arg GetMailsOfUserByFacultyParams) ([]GetMailsOfUserByFacultyRow, error) {
	rows, err := q.db.QueryContext(ctx, getMailsOfUserByFaculty, arg.UserID, arg.FacultyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMailsOfUserByFacultyRow
	for rows.Next() {
		var i GetMailsOfUserByFacultyRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FacultyID,
			&i.IsMailed,
			&i.IsMailReplied,
			&i.ReplyVibe,
			&i.IsInterviewRequested,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacultyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMailByID = `-- name: UpdateMailByID :one
UPDATE mail
SET 
    faculty_id = $2,
    is_mailed = $3,
    is_mail_replied = $4,
    reply_vibe = $5,
    is_interview_requested = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, faculty_id, is_mailed, is_mail_replied, reply_vibe, is_interview_requested, created_at, updated_at
`

type UpdateMailByIDParams struct {
	ID                   uuid.UUID
	FacultyID            uuid.UUID
	IsMailed             sql.NullBool
	IsMailReplied        sql.NullBool
	ReplyVibe            NullReplyVibeEnum
	IsInterviewRequested sql.NullBool
}

func (q *Queries) UpdateMailByID(ctx context.Context, arg UpdateMailByIDParams) (Mail, error) {
	row := q.db.QueryRowContext(ctx, updateMailByID,
		arg.ID,
		arg.FacultyID,
		arg.IsMailed,
		arg.IsMailReplied,
		arg.ReplyVibe,
		arg.IsInterviewRequested,
	)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FacultyID,
		&i.IsMailed,
		&i.IsMailReplied,
		&i.ReplyVibe,
		&i.IsInterviewRequested,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
