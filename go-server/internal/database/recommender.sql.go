// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recommender.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRecommender = `-- name: CreateRecommender :one
INSERT INTO recommender (user_id, name, email, designation, institution, relationship)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, name, email, designation, institution, relationship, created_at, updated_at
`

type CreateRecommenderParams struct {
	UserID       uuid.UUID
	Name         string
	Email        string
	Designation  sql.NullString
	Institution  sql.NullString
	Relationship sql.NullString
}

func (q *Queries) CreateRecommender(ctx context.Context, arg CreateRecommenderParams) (Recommender, error) {
	row := q.db.QueryRowContext(ctx, createRecommender,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Designation,
		arg.Institution,
		arg.Relationship,
	)
	var i Recommender
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Designation,
		&i.Institution,
		&i.Relationship,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRecommenderByID = `-- name: DeleteRecommenderByID :one
DELETE FROM recommender
WHERE id = $1
RETURNING id, user_id, name, email, designation, institution, relationship, created_at, updated_at
`

func (q *Queries) DeleteRecommenderByID(ctx context.Context, id uuid.UUID) (Recommender, error) {
	row := q.db.QueryRowContext(ctx, deleteRecommenderByID, id)
	var i Recommender
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Designation,
		&i.Institution,
		&i.Relationship,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecommenderByID = `-- name: GetRecommenderByID :one
SELECT id, user_id, name, email, designation, institution, relationship, created_at, updated_at FROM recommender
WHERE id = $1
`

func (q *Queries) GetRecommenderByID(ctx context.Context, id uuid.UUID) (Recommender, error) {
	row := q.db.QueryRowContext(ctx, getRecommenderByID, id)
	var i Recommender
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Designation,
		&i.Institution,
		&i.Relationship,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecommendersOfUser = `-- name: GetRecommendersOfUser :many
SELECT id, user_id, name, email, designation, institution, relationship, created_at, updated_at FROM recommender
WHERE user_id = $1
`

func (q *Queries) GetRecommendersOfUser(ctx context.Context, userID uuid.UUID) ([]Recommender, error) {
	rows, err := q.db.QueryContext(ctx, getRecommendersOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recommender
	for rows.Next() {
		var i Recommender
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Designation,
			&i.Institution,
			&i.Relationship,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecommenderByID = `-- name: UpdateRecommenderByID :one
UPDATE recommender
SET 
    name = $2,
    email = $3,
    designation = $4,
    institution = $5,
    relationship = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, email, designation, institution, relationship, created_at, updated_at
`

type UpdateRecommenderByIDParams struct {
	ID           uuid.UUID
	Name         string
	Email        string
	Designation  sql.NullString
	Institution  sql.NullString
	Relationship sql.NullString
}

func (q *Queries) UpdateRecommenderByID(ctx context.Context, arg UpdateRecommenderByIDParams) (Recommender, error) {
	row := q.db.QueryRowContext(ctx, updateRecommenderByID,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Designation,
		arg.Institution,
		arg.Relationship,
	)
	var i Recommender
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Designation,
		&i.Institution,
		&i.Relationship,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
