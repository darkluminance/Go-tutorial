// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type ReplyVibeEnum string

const (
	ReplyVibeEnumENTHUSIASTIC ReplyVibeEnum = "ENTHUSIASTIC"
	ReplyVibeEnumGENERIC      ReplyVibeEnum = "GENERIC"
)

func (e *ReplyVibeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReplyVibeEnum(s)
	case string:
		*e = ReplyVibeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ReplyVibeEnum: %T", src)
	}
	return nil
}

type NullReplyVibeEnum struct {
	ReplyVibeEnum ReplyVibeEnum
	Valid         bool // Valid is true if ReplyVibeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReplyVibeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ReplyVibeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReplyVibeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReplyVibeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReplyVibeEnum), nil
}

type UniversityApplicationStatusEnum string

const (
	UniversityApplicationStatusEnumNOTAPPLIED              UniversityApplicationStatusEnum = "NOT APPLIED"
	UniversityApplicationStatusEnumSKIPPED                 UniversityApplicationStatusEnum = "SKIPPED"
	UniversityApplicationStatusEnumINPROGRESS              UniversityApplicationStatusEnum = "IN PROGRESS"
	UniversityApplicationStatusEnumPENDINGFEE              UniversityApplicationStatusEnum = "PENDING FEE"
	UniversityApplicationStatusEnumAPPLIED                 UniversityApplicationStatusEnum = "APPLIED"
	UniversityApplicationStatusEnumREJECTED                UniversityApplicationStatusEnum = "REJECTED"
	UniversityApplicationStatusEnumACCEPTEDWITHFUND        UniversityApplicationStatusEnum = "ACCEPTED WITH FUND"
	UniversityApplicationStatusEnumACCEPTEDWITHOUTFULLFUND UniversityApplicationStatusEnum = "ACCEPTED WITHOUT FULL FUND"
)

func (e *UniversityApplicationStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UniversityApplicationStatusEnum(s)
	case string:
		*e = UniversityApplicationStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UniversityApplicationStatusEnum: %T", src)
	}
	return nil
}

type NullUniversityApplicationStatusEnum struct {
	UniversityApplicationStatusEnum UniversityApplicationStatusEnum
	Valid                           bool // Valid is true if UniversityApplicationStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUniversityApplicationStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UniversityApplicationStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UniversityApplicationStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUniversityApplicationStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UniversityApplicationStatusEnum), nil
}

type Faculty struct {
	ID               uuid.UUID
	UserID           uuid.UUID
	Name             string
	Email            sql.NullString
	UniversityID     uuid.UUID
	Designation      string
	ResearchAreas    []string
	InterestedPapers []string
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
}

type Interview struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	FacultyID   uuid.UUID
	Date        sql.NullTime
	IsCompleted sql.NullBool
	Remarks     sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

type Mail struct {
	ID                   uuid.UUID
	UserID               uuid.UUID
	FacultyID            uuid.UUID
	IsMailed             sql.NullBool
	IsMailReplied        sql.NullBool
	ReplyVibe            NullReplyVibeEnum
	IsInterviewRequested sql.NullBool
	CreatedAt            sql.NullTime
	UpdatedAt            sql.NullTime
}

type Recommender struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	Name         string
	Email        string
	Designation  sql.NullString
	Institution  sql.NullString
	Relationship sql.NullString
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}

type RecommenderStatus struct {
	Recommender    uuid.UUID
	IsLorSubmitted bool
	UserID         uuid.UUID
}

type University struct {
	ID                           uuid.UUID
	UserID                       uuid.UUID
	Name                         string
	Website                      sql.NullString
	Location                     sql.NullString
	MainRanking                  sql.NullInt32
	SubjectRanking               sql.NullInt32
	ApplicationDeadline          sql.NullTime
	EarlyDeadline                sql.NullTime
	IsGreMust                    sql.NullBool
	IsGmatMust                   sql.NullBool
	LorCount                     sql.NullInt32
	IsOfficialTranscriptRequired sql.NullBool
	IsTranscriptNeedsEvaluation  sql.NullBool
	AcceptedEvaluations          []string
	CreatedAt                    sql.NullTime
	UpdatedAt                    sql.NullTime
}

type UniversityApplication struct {
	ID                     uuid.UUID
	UserID                 uuid.UUID
	UniversityID           uuid.UUID
	ShortlistedFacultiesID []uuid.UUID
	RecommendersID         []uuid.UUID
	ApplicationStatus      NullUniversityApplicationStatusEnum
	LanguageScoreSubmitted sql.NullBool
	GreSubmitted           sql.NullBool
	GmatSubmitted          sql.NullBool
	CreatedAt              sql.NullTime
	UpdatedAt              sql.NullTime
}

type User struct {
	ID        uuid.UUID
	Name      string
	Username  string
	Email     string
	Password  string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}
