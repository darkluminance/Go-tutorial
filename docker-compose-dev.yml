services:
  db:
    image: postgres:17-alpine
    build:
      context: ./postgresql-database
    volumes:
      - db_volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./go-server
      dockerfile: Dockerfile-dev
    volumes:
      - ./go-server:/app
      - go-mod-cache:/go/pkg/mod
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - DB_URL=${DB_URL}
      - PORT=${PORT}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_EMAIL=${SMTP_EMAIL}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
    entrypoint: >
      sh -c "
      goose -dir /app/migrations postgres ${DB_URL} up
      "
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./solid-js-frontend
      dockerfile: Dockerfile-dev
    ports:
      - "3000:3000"
    volumes:
      - ./solid-js-frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  go-mod-cache:
  db_volume:
