// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: faculty.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createFaculty = `-- name: CreateFaculty :one
INSERT INTO faculty (user_id, name, email, university_id, designation, research_areas, interested_papers)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, name, email, university_id, designation, research_areas, interested_papers, created_at, updated_at
`

type CreateFacultyParams struct {
	UserID           uuid.UUID
	Name             string
	Email            sql.NullString
	UniversityID     uuid.UUID
	Designation      string
	ResearchAreas    []string
	InterestedPapers []string
}

func (q *Queries) CreateFaculty(ctx context.Context, arg CreateFacultyParams) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, createFaculty,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.UniversityID,
		arg.Designation,
		pq.Array(arg.ResearchAreas),
		pq.Array(arg.InterestedPapers),
	)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.UniversityID,
		&i.Designation,
		pq.Array(&i.ResearchAreas),
		pq.Array(&i.InterestedPapers),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFacultyByID = `-- name: DeleteFacultyByID :one
DELETE FROM faculty
WHERE id = $1
RETURNING id, user_id, name, email, university_id, designation, research_areas, interested_papers, created_at, updated_at
`

func (q *Queries) DeleteFacultyByID(ctx context.Context, id uuid.UUID) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, deleteFacultyByID, id)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.UniversityID,
		&i.Designation,
		pq.Array(&i.ResearchAreas),
		pq.Array(&i.InterestedPapers),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFacultyByID = `-- name: GetFacultyByID :one
SELECT id, user_id, name, email, university_id, designation, research_areas, interested_papers, created_at, updated_at FROM faculty
WHERE id = $1
`

func (q *Queries) GetFacultyByID(ctx context.Context, id uuid.UUID) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, getFacultyByID, id)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.UniversityID,
		&i.Designation,
		pq.Array(&i.ResearchAreas),
		pq.Array(&i.InterestedPapers),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFacultysOfUser = `-- name: GetFacultysOfUser :many
SELECT id, user_id, name, email, university_id, designation, research_areas, interested_papers, created_at, updated_at FROM faculty
WHERE user_id = $1
`

func (q *Queries) GetFacultysOfUser(ctx context.Context, userID uuid.UUID) ([]Faculty, error) {
	rows, err := q.db.QueryContext(ctx, getFacultysOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faculty
	for rows.Next() {
		var i Faculty
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.UniversityID,
			&i.Designation,
			pq.Array(&i.ResearchAreas),
			pq.Array(&i.InterestedPapers),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFacultyByID = `-- name: UpdateFacultyByID :one
UPDATE faculty
SET 
    name = $2,
    email = $3,
    university_id = $4,
    designation = $5,
    research_areas = $6,
    interested_papers = $7,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, email, university_id, designation, research_areas, interested_papers, created_at, updated_at
`

type UpdateFacultyByIDParams struct {
	ID               uuid.UUID
	Name             string
	Email            sql.NullString
	UniversityID     uuid.UUID
	Designation      string
	ResearchAreas    []string
	InterestedPapers []string
}

func (q *Queries) UpdateFacultyByID(ctx context.Context, arg UpdateFacultyByIDParams) (Faculty, error) {
	row := q.db.QueryRowContext(ctx, updateFacultyByID,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.UniversityID,
		arg.Designation,
		pq.Array(arg.ResearchAreas),
		pq.Array(arg.InterestedPapers),
	)
	var i Faculty
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.UniversityID,
		&i.Designation,
		pq.Array(&i.ResearchAreas),
		pq.Array(&i.InterestedPapers),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
