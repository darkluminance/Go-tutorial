// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: university_list.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createUniversityList = `-- name: CreateUniversityList :one
INSERT INTO university_list (user_id, name, university_ids)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, university_ids, created_at, updated_at
`

type CreateUniversityListParams struct {
	UserID        uuid.UUID
	Name          string
	UniversityIds []uuid.UUID
}

func (q *Queries) CreateUniversityList(ctx context.Context, arg CreateUniversityListParams) (UniversityList, error) {
	row := q.db.QueryRowContext(ctx, createUniversityList, arg.UserID, arg.Name, pq.Array(arg.UniversityIds))
	var i UniversityList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.UniversityIds),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUniversityFromList = `-- name: DeleteUniversityFromList :one
UPDATE university_list
SET 
    university_ids = ARRAY_REMOVE(university_ids, $2),
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, university_ids, created_at, updated_at
`

type DeleteUniversityFromListParams struct {
	ID          uuid.UUID
	ArrayRemove interface{}
}

func (q *Queries) DeleteUniversityFromList(ctx context.Context, arg DeleteUniversityFromListParams) (UniversityList, error) {
	row := q.db.QueryRowContext(ctx, deleteUniversityFromList, arg.ID, arg.ArrayRemove)
	var i UniversityList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.UniversityIds),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUniversityListByID = `-- name: DeleteUniversityListByID :one
DELETE FROM university_list
WHERE id = $1
RETURNING id, user_id, name, university_ids, created_at, updated_at
`

func (q *Queries) DeleteUniversityListByID(ctx context.Context, id uuid.UUID) (UniversityList, error) {
	row := q.db.QueryRowContext(ctx, deleteUniversityListByID, id)
	var i UniversityList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.UniversityIds),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUniversityListByID = `-- name: GetUniversityListByID :one
SELECT id, user_id, name, university_ids, created_at, updated_at FROM university_list
WHERE id = $1
`

func (q *Queries) GetUniversityListByID(ctx context.Context, id uuid.UUID) (UniversityList, error) {
	row := q.db.QueryRowContext(ctx, getUniversityListByID, id)
	var i UniversityList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.UniversityIds),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUniversityListOfUser = `-- name: GetUniversityListOfUser :many
SELECT id, user_id, name, university_ids, created_at, updated_at FROM university_list
WHERE user_id = $1
`

func (q *Queries) GetUniversityListOfUser(ctx context.Context, userID uuid.UUID) ([]UniversityList, error) {
	rows, err := q.db.QueryContext(ctx, getUniversityListOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UniversityList
	for rows.Next() {
		var i UniversityList
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			pq.Array(&i.UniversityIds),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUniversityIntoList = `-- name: InsertUniversityIntoList :one
UPDATE university_list
SET 
    university_ids = ARRAY_APPEND(university_ids, $2),
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, university_ids, created_at, updated_at
`

type InsertUniversityIntoListParams struct {
	ID          uuid.UUID
	ArrayAppend interface{}
}

func (q *Queries) InsertUniversityIntoList(ctx context.Context, arg InsertUniversityIntoListParams) (UniversityList, error) {
	row := q.db.QueryRowContext(ctx, insertUniversityIntoList, arg.ID, arg.ArrayAppend)
	var i UniversityList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.UniversityIds),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUniversityListByID = `-- name: UpdateUniversityListByID :one
UPDATE university_list
SET 
    name = $2,
    university_ids = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, university_ids, created_at, updated_at
`

type UpdateUniversityListByIDParams struct {
	ID            uuid.UUID
	Name          string
	UniversityIds []uuid.UUID
}

func (q *Queries) UpdateUniversityListByID(ctx context.Context, arg UpdateUniversityListByIDParams) (UniversityList, error) {
	row := q.db.QueryRowContext(ctx, updateUniversityListByID, arg.ID, arg.Name, pq.Array(arg.UniversityIds))
	var i UniversityList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		pq.Array(&i.UniversityIds),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
